from typing import Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from admin_panel import (
    is_admin,
    get_admin_keyboard,
    get_categories_keyboard,
    get_products_keyboard,
    get_tests_keyboard,
    get_stats_keyboard,
    edit_message,
    format_admin_message,
    format_error_message,
    AdminCallback,
    AdminCategoryCallback,
    AdminProductCallback,
    AdminTestCallback,
    AdminStatsCallback
)
from logging_config import admin_logger
from sqlite_db import db

# Create router for admin handlers
router = Router()

# States for admin forms
class CategoryForm(StatesGroup):
    name = State()
    description = State()
    image = State()

class ProductForm(StatesGroup):
    category = State()
    name = State()
    description = State()
    price = State()
    images = State()

class TestForm(StatesGroup):
    title = State()
    description = State()
    passing_score = State()
    time_limit = State()
    questions = State()

# Command handlers
@router.message(Command("admin"))
async def admin_command(message: Message) -> None:
    """Handle /admin command"""
    if not is_admin(message.from_user.id):
        admin_logger.warning(
            f"Unauthorized admin access attempt by user {message.from_user.id}"
        )
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            parse_mode="HTML"
        )
        return
    
    admin_logger.info(f"Admin panel accessed by user {message.from_user.id}")
    
    text = format_admin_message(
        title="üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        content=(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
    )
    
    await message.answer(text, reply_markup=get_admin_keyboard())

# Callback handlers
@router.callback_query(AdminCallback.filter(F.action == "main"))
async def admin_main_callback(callback: CallbackQuery) -> None:
    """Handle main admin panel callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        content=(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
    )
    
    await edit_message(callback, text, get_admin_keyboard())

@router.callback_query(AdminCallback.filter(F.action == "categories"))
async def admin_categories_callback(callback: CallbackQuery) -> None:
    """Handle categories management callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
            "‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        )
    )
    
    await edit_message(callback, text, get_categories_keyboard())

@router.callback_query(AdminCallback.filter(F.action == "products"))
async def admin_products_callback(callback: CallbackQuery) -> None:
    """Handle products management callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
            "‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä"
        )
    )
    
    await edit_message(callback, text, get_products_keyboard())

@router.callback_query(AdminCallback.filter(F.action == "tests"))
async def admin_tests_callback(callback: CallbackQuery) -> None:
    """Handle tests management callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.\n\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è."
        )
    )
    
    await edit_message(callback, text, get_tests_keyboard())

@router.callback_query(AdminCallback.filter(F.action == "stats"))
async def admin_stats_callback(callback: CallbackQuery) -> None:
    """Handle statistics callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "üìä –¢–µ—Å—Ç—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º\n"
            "üìà –ü—Ä–æ–¥—É–∫—Ç—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"
        )
    )
    
    await edit_message(callback, text, get_stats_keyboard())

# Category management callbacks
@router.callback_query(AdminCategoryCallback.filter(F.action == "list"))
async def category_list_callback(
    callback: CallbackQuery,
    callback_data: AdminCategoryCallback
) -> None:
    """Handle category list pagination"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è\n"
            "‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        )
    )
    
    await edit_message(
        callback,
        text,
        get_categories_keyboard(page=callback_data.page)
    )

@router.callback_query(AdminCategoryCallback.filter(F.action == "edit"))
async def category_edit_callback(
    callback: CallbackQuery,
    callback_data: AdminCategoryCallback,
    state: FSMContext
) -> None:
    """Handle category edit callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        category = db.get_category(callback_data.category_id)
        if not category:
            raise ValueError("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        text = format_admin_message(
            title=f"üìÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category['name']}",
            content=(
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {category['name']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {category['description'] or '–ù–µ—Ç'}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if category['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                f"<b>–¢–æ–≤–∞—Ä–æ–≤:</b> {len(db.get_products_by_category(category['id']))}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        )
        
        # Create edit keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=AdminCategoryCallback(
                action="edit_name",
                category_id=category['id']
            ).pack()
        )
        keyboard.button(
            text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=AdminCategoryCallback(
                action="edit_description",
                category_id=category['id']
            ).pack()
        )
        keyboard.button(
            text="üñº –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            callback_data=AdminCategoryCallback(
                action="edit_image",
                category_id=category['id']
            ).pack()
        )
        keyboard.button(
            text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not category['is_active'] else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=AdminCategoryCallback(
                action="toggle_active",
                category_id=category['id']
            ).pack()
        )
        keyboard.button(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=AdminCategoryCallback(
                action="delete",
                category_id=category['id']
            ).pack()
        )
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=AdminCategoryCallback(action="list", page=1).pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in category edit: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        )

@router.callback_query(AdminCategoryCallback.filter(F.action == "create"))
async def category_create_callback(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Handle category creation callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        content="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    
    # Create cancel keyboard
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=AdminCategoryCallback(action="list", page=1).pack()
    )
    
    await edit_message(callback, text, keyboard.as_markup())
    await state.set_state(CategoryForm.name)

# Product management callbacks
@router.callback_query(AdminProductCallback.filter(F.action == "list"))
async def product_list_callback(
    callback: CallbackQuery,
    callback_data: AdminProductCallback
) -> None:
    """Handle product list pagination"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.\n\n"
            "‚úÖ - –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
            "‚ùå - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä"
        )
    )
    
    await edit_message(
        callback,
        text,
        get_products_keyboard(
            category_id=callback_data.category_id,
            page=callback_data.page
        )
    )

@router.callback_query(AdminProductCallback.filter(F.action == "edit"))
async def product_edit_callback(
    callback: CallbackQuery,
    callback_data: AdminProductCallback,
    state: FSMContext
) -> None:
    """Handle product edit callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        product = db.get_product(callback_data.product_id)
        if not product:
            raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        category = db.get_category(product['category_id'])
        
        text = format_admin_message(
            title=f"üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product['name']}",
            content=(
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product['name']}\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category['name']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product['description'] or '–ù–µ—Ç'}\n"
                f"<b>–¶–µ–Ω–∞:</b> {product['price_info'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if product['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b> {len(product.get('images', []))}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        )
        
        # Create edit keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=AdminProductCallback(
                action="edit_name",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=AdminProductCallback(
                action="edit_description",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",
            callback_data=AdminProductCallback(
                action="edit_price",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="üñº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            callback_data=AdminProductCallback(
                action="manage_images",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not product['is_active'] else "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=AdminProductCallback(
                action="toggle_active",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=AdminProductCallback(
                action="delete",
                product_id=product['id']
            ).pack()
        )
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=AdminProductCallback(
                action="list",
                category_id=product['category_id'],
                page=1
            ).pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in product edit: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        )

@router.callback_query(AdminProductCallback.filter(F.action == "create"))
async def product_create_callback(
    callback: CallbackQuery,
    callback_data: AdminProductCallback,
    state: FSMContext
) -> None:
    """Handle product creation callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    # If category_id is provided, start with name
    if callback_data.category_id:
        await state.update_data(category_id=callback_data.category_id)
        text = format_admin_message(
            title="üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
            content="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
        )
        await state.set_state(ProductForm.name)
    else:
        # Otherwise, start with category selection
        text = format_admin_message(
            title="üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
            content="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"
        )
        await state.set_state(ProductForm.category)
    
    # Create cancel keyboard
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=AdminProductCallback(
            action="list",
            category_id=callback_data.category_id,
            page=1
        ).pack()
    )
    
    await edit_message(callback, text, keyboard.as_markup())

# Test management callbacks
@router.callback_query(AdminTestCallback.filter(F.action == "list"))
async def test_list_callback(
    callback: CallbackQuery,
    callback_data: AdminTestCallback
) -> None:
    """Handle test list pagination"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏",
        content=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.\n\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è."
        )
    )
    
    await edit_message(
        callback,
        text,
        get_tests_keyboard(page=callback_data.page)
    )

@router.callback_query(AdminTestCallback.filter(F.action == "edit"))
async def test_edit_callback(
    callback: CallbackQuery,
    callback_data: AdminTestCallback,
    state: FSMContext
) -> None:
    """Handle test edit callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        test = db.get_test(callback_data.test_id)
        if not test:
            raise ValueError("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Get test statistics
        stats = db.get_test_stats(test['id'])
        
        text = format_admin_message(
            title=f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: {test['title']}",
            content=(
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {test['title']}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {test['description'] or '–ù–µ—Ç'}\n"
                f"<b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {test['passing_score']}%\n"
                f"<b>–õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏:</b> {test['time_limit'] or '–ù–µ—Ç'}\n"
                f"<b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(test['questions'])}\n\n"
                f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"–ü–æ–ø—ã—Ç–æ–∫: {stats['attempts_count']}\n"
                f"–£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_attempts']}\n"
                f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}%\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        )
        
        # Create edit keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=AdminTestCallback(
                action="edit_title",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=AdminTestCallback(
                action="edit_description",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª",
            callback_data=AdminTestCallback(
                action="edit_passing_score",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏",
            callback_data=AdminTestCallback(
                action="edit_time_limit",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
            callback_data=AdminTestCallback(
                action="manage_questions",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            callback_data=AdminTestCallback(
                action="view_stats",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=AdminTestCallback(
                action="delete",
                test_id=test['id']
            ).pack()
        )
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=AdminTestCallback(action="list", page=1).pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in test edit: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        )

@router.callback_query(AdminTestCallback.filter(F.action == "create"))
async def test_create_callback(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Handle test creation callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    text = format_admin_message(
        title="üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞",
        content="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:"
    )
    
    # Create cancel keyboard
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=AdminTestCallback(action="list", page=1).pack()
    )
    
    await edit_message(callback, text, keyboard.as_markup())
    await state.set_state(TestForm.title)

# Statistics callbacks
@router.callback_query(AdminStatsCallback.filter(F.action == "users"))
async def stats_users_callback(callback: CallbackQuery) -> None:
    """Handle users statistics callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        # Get user statistics
        stats = db.get_user_stats()
        
        text = format_admin_message(
            title="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            content=(
                f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
                f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['active_users']}\n"
                f"<b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24—á:</b> {stats['new_users_24h']}\n"
                f"<b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7–¥:</b> {stats['new_users_7d']}\n"
                f"<b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 30–¥:</b> {stats['new_users_30d']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            )
        )
        
        # Create period selection keyboard
        keyboard = InlineKeyboardBuilder()
        keyboard.button(
            text="üìä –ó–∞ 24 —á–∞—Å–∞",
            callback_data=AdminStatsCallback(
                action="users",
                period="24h"
            ).pack()
        )
        keyboard.button(
            text="üìä –ó–∞ 7 –¥–Ω–µ–π",
            callback_data=AdminStatsCallback(
                action="users",
                period="7d"
            ).pack()
        )
        keyboard.button(
            text="üìä –ó–∞ 30 –¥–Ω–µ–π",
            callback_data=AdminStatsCallback(
                action="users",
                period="30d"
            ).pack()
        )
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="stats").pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in users statistics: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        )

@router.callback_query(AdminStatsCallback.filter(F.action == "tests"))
async def stats_tests_callback(callback: CallbackQuery) -> None:
    """Handle tests statistics callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        # Get test statistics
        tests = db.get_tests_list()
        total_attempts = sum(test['attempts_count'] for test in tests)
        successful_attempts = sum(
            test['attempts_count'] * test['success_rate'] / 100
            for test in tests
        )
        
        text = format_admin_message(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤",
            content=(
                f"<b>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(tests)}\n"
                f"<b>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {total_attempts}\n"
                f"<b>–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫:</b> {successful_attempts:.0f}\n"
                f"<b>–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:</b> "
                f"{(successful_attempts/total_attempts*100 if total_attempts else 0):.1f}%\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            )
        )
        
        # Create test selection keyboard
        keyboard = InlineKeyboardBuilder()
        for test in tests:
            keyboard.button(
                text=f"{test['title']} ({test['attempts_count']} –ø–æ–ø—ã—Ç–æ–∫)",
                callback_data=AdminStatsCallback(
                    action="test_details",
                    target=str(test['id'])
                ).pack()
            )
        
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="stats").pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in tests statistics: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        )

@router.callback_query(AdminStatsCallback.filter(F.action == "products"))
async def stats_products_callback(callback: CallbackQuery) -> None:
    """Handle products statistics callback"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    try:
        # Get product statistics
        categories = db.get_categories()
        total_products = 0
        active_products = 0
        
        for category in categories:
            products = db.get_products_by_category(category['id'])
            total_products += len(products)
            active_products += sum(1 for p in products if p['is_active'])
        
        text = format_admin_message(
            title="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
            content=(
                f"<b>–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {len(categories)}\n"
                f"<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_products}\n"
                f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b> {active_products}\n"
                f"<b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_products - active_products}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            )
        )
        
        # Create category selection keyboard
        keyboard = InlineKeyboardBuilder()
        for category in categories:
            products = db.get_products_by_category(category['id'])
            keyboard.button(
                text=f"{category['name']} ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)",
                callback_data=AdminStatsCallback(
                    action="category_details",
                    target=str(category['id'])
                ).pack()
            )
        
        keyboard.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
            callback_data=AdminCallback(action="stats").pack()
        )
        keyboard.adjust(1)
        
        await edit_message(callback, text, keyboard.as_markup())
        
    except Exception as e:
        admin_logger.error(f"Error in products statistics: {e}")
        await callback.answer(
            format_error_message(e),
            show_alert=True
        ) 