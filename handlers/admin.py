from aiogram import F, types
from aiogram.types import Message
from aiogram.filters import Command
import uuid
import logging
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from utils.message_utils import safe_edit_message
from sqlite_db import db  # Import the database instance
from config import ADMIN_USER_IDS
from utils.keyboards import (
    get_admin_keyboard, get_admin_categories_keyboard,
    get_admin_products_keyboard, get_admin_products_list_keyboard,
    get_admin_tests_keyboard, get_admin_stats_keyboard,
    get_cancel_keyboard
)
from dispatcher import dp
from states import CategoryForm, ProductForm, TestForm

logger = logging.getLogger(__name__)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def check_admin_access(user_id: int, query: types.CallbackQuery = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id not in ADMIN_USER_IDS:  # Updated to use ADMIN_USER_IDS
        msg = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"
        if query:
            await query.answer(msg)
        return False
    return True

async def admin_check_middleware(handler, event, data):
    if event.from_user.id not in ADMIN_USER_IDS:
        await event.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    return await handler(event, data)

async def safe_clear_state(state: FSMContext) -> None:
    """Safely clear the state, handling any errors"""
    if state is None:
        return
    
    try:
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            logger.debug(f"State cleared successfully. Previous state: {current_state}")
    except Exception as e:
        logger.warning(f"Failed to clear state: {e}")
        # Don't raise the exception, just log it

async def send_admin_menu(
    target: types.Message | types.CallbackQuery,
    text: str = "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if isinstance(target, types.CallbackQuery):
        await target.answer()
        await safe_edit_message(
            message=target.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )
    else:
        await target.answer(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.message(Command("admin"))
@dp.callback_query(F.data == "admin")
async def admin_handler(
    update: types.Message | types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    user_id = update.from_user.id
    if not await check_admin_access(user_id, update if isinstance(update, types.CallbackQuery) else None):
        return
    
    await safe_clear_state(state)
    await send_admin_menu(update)

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò =====
@dp.callback_query(F.data == "admin_categories")
async def admin_categories_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    categories = db.get_categories()  # Use db instance
    
    await safe_edit_message(
        message=query.message,
        text="üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_categories_keyboard(categories)
    )

@dp.callback_query(F.data == "create_category")
async def create_category_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not await check_admin_access(callback.from_user.id, callback):
        return
    
    await safe_clear_state(state)  # Clear any existing state first
    await state.set_state(CategoryForm.name)
    await safe_edit_message(
        message=callback.message,
        text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_cancel_keyboard("cancel_category_creation")
    )

# ===== –¢–û–í–ê–†–´ =====
@dp.callback_query(F.data.startswith("admin_products"))
async def admin_products_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    parts = query.data.split(':')
    
    if len(parts) > 1 and parts[0] == 'admin_products_category':
        # –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = parts[1]
        products = db.get_products_by_category(category_id)
        category = next((c for c in db.get_categories() if c['id'] == category_id), None)
        
        text = (
            f"üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
        )
        
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_products_list_keyboard(products, category_id)
        )
    else:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
        categories = db.get_categories()
        await safe_edit_message(
            message=query.message,
            text="üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_products_keyboard(categories)
        )

@dp.callback_query(F.data == "create_product")
async def create_product_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not await check_admin_access(callback.from_user.id, callback):
        return
    
    await safe_clear_state(state)  # Clear any existing state first
    await state.set_state(ProductForm.name)
    await safe_edit_message(
        message=callback.message,
        text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_cancel_keyboard("cancel_product_creation")
    )

# ===== –¢–ï–°–¢–´ =====
@dp.callback_query(F.data == "admin_tests")
async def admin_tests_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    tests = db.get_tests_list()
    
    await safe_edit_message(
        message=query.message,
        text="üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_tests_keyboard(tests)
    )

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
@dp.callback_query(F.data.startswith("admin_stats"))
async def admin_stats_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    parts = query.data.split('_')
    
    if len(parts) > 2:
        if parts[2] == 'users':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.get_all_users()
            admin_count = sum(1 for u in users if u.get('is_admin'))
            
            text = (
                "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
                f"–û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users) - admin_count}\n\n"
                "<i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>"
            )
        elif parts[2] == 'tests':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
            text = (
                "üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                "<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>"
            )
        else:
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    else:
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    
    await safe_edit_message(
        message=query.message,
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_stats_keyboard()
    )

# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–û–í =====
@dp.callback_query(F.data == "admin_search_products")
async def admin_search_products_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)  # Clear any existing state first
    await state.set_state(ProductForm.search)
    await safe_edit_message(
        message=query.message,
        text="üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=get_cancel_keyboard("cancel_search")
    )

@dp.message(ProductForm.search)
async def process_product_search(
    message: types.Message,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if not await check_admin_access(message.from_user.id):
        return
    
    query_text = message.text.strip()
    if not query_text:
        await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    products = db.search_products(query_text)
    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await safe_clear_state(state)
        return
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
    for product in products:
        text += f"‚Ä¢ {product['name']} (ID: {product['id']})\n"
    
    await message.answer(text, parse_mode=ParseMode.HTML)
    await safe_clear_state(state)

@dp.message(CategoryForm.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not await check_admin_access(message.from_user.id):
        return
    
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    try:
        db.add_category(name)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logger.error(f"Failed to create category: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    await safe_clear_state(state)

# ===== –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô =====
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    await query.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await send_admin_menu(query)

__all__ = [
    'admin_handler',
    'admin_categories_handler',
    'create_category_handler',
    'admin_products_handler',
    'create_product_handler',
    'admin_tests_handler',
    'admin_stats_handler',
    'admin_search_products_handler'
]
