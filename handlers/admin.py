from aiogram import F, types
from aiogram.types import Message
from aiogram.filters import Command
import uuid
import logging
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from utils.message_utils import safe_edit_message
from sqlite_db import db  # Import the database instance
from config import ADMIN_USER_IDS
from utils.keyboards import (
    get_admin_keyboard, get_admin_categories_keyboard,
    get_admin_products_keyboard, get_admin_products_list_keyboard,
    get_admin_tests_keyboard, get_admin_stats_keyboard,
    get_cancel_keyboard, get_confirmation_keyboard
)
from dispatcher import dp
from states import CategoryForm, ProductForm, TestForm

logger = logging.getLogger(__name__)

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def check_admin_access(user_id: int, query: types.CallbackQuery = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id not in ADMIN_USER_IDS:  # Updated to use ADMIN_USER_IDS
        msg = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"
        if query:
            await query.answer(msg)
        return False
    return True

async def admin_check_middleware(handler, event, data):
    if event.from_user.id not in ADMIN_USER_IDS:
        await event.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    return await handler(event, data)

async def safe_clear_state(state: FSMContext) -> None:
    """Safely clear the state, handling any errors"""
    if state is None:
        return
    
    try:
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            logger.debug(f"State cleared successfully. Previous state: {current_state}")
    except Exception as e:
        logger.warning(f"Failed to clear state: {e}")
        # Don't raise the exception, just log it

async def send_admin_menu(
    target: types.Message | types.CallbackQuery,
    text: str = "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if isinstance(target, types.CallbackQuery):
        await target.answer()
        await safe_edit_message(
            message=target.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )
    else:
        await target.answer(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.callback_query()
async def debug_callback_handler(query: types.CallbackQuery):
    logger.info(f"DEBUG: Received callback query: {query.data} from user {query.from_user.id}")
    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    return False  # Continue to other handlers

@dp.message(Command("admin"))
@dp.callback_query(F.data == "admin")
async def admin_handler(update: types.Message | types.CallbackQuery, state: FSMContext) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    try:
        user_id = update.from_user.id
        if not await check_admin_access(user_id, update if isinstance(update, types.CallbackQuery) else None):
            return
        logger.info(f"Admin menu opened by user {user_id}")
        await safe_clear_state(state)
        # Create keyboard with unified callback data
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category:list"),
                types.InlineKeyboardButton(text="üçé –¢–æ–≤–∞—Ä—ã", callback_data="product:list")
            ],
            [
                types.InlineKeyboardButton(text="üìù –¢–µ—Å—Ç—ã", callback_data="test:list"),
                types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:list")
            ],
            [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        text = "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        if isinstance(update, types.CallbackQuery):
            await update.answer()
            await safe_edit_message(
                message=update.message,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        else:
            await update.answer(
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"Error in admin_handler: {e}", exc_info=True)
        if isinstance(update, types.CallbackQuery):
            await update.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò =====
@dp.callback_query(F.data == "admin_categories")
async def admin_categories_handler(query: types.CallbackQuery, state: FSMContext) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        logger.info(f"Categories menu opened by user {query.from_user.id}")
        await safe_clear_state(state)
        
        categories = db.get_categories()
        buttons = []
        
        # Add category buttons
        for cat in categories:
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"‚úèÔ∏è {cat['name']}", 
                    callback_data=f"category_edit:{cat['id']}"
                )
            ])
        
        # Add create and back buttons
        buttons.extend([
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_category")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin")]
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:"
        if not categories:
            text = "üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        
        await query.answer()
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_categories_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)

@dp.callback_query(F.data == "create_category")
async def create_category_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if not await check_admin_access(callback.from_user.id, callback):
            return
        
        logger.info(f"Category creation started by user {callback.from_user.id}")
        await safe_clear_state(state)
        await state.set_state(CategoryForm.name)
        await safe_edit_message(
            message=callback.message,
            text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_cancel_keyboard("cancel_category_creation")
        )
    except Exception as e:
        logger.error(f"Error in create_category_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith("admin_category_edit:"))
async def admin_category_edit_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        category_id = query.data.split(':')[1]
        logger.info(f"Admin editing category {category_id} by user {query.from_user.id}")
        
        category = next((c for c in db.get_categories() if c['id'] == category_id), None)
        if not category:
            logger.error(f"Category {category_id} not found")
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await state.set_state(CategoryForm.edit_name)
        await state.update_data(category_id=category_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {category['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard("cancel_category_edit")
        )
    except Exception as e:
        logger.error(f"Error in admin_category_edit_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith("admin_category_delete:"))
async def admin_category_delete_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        category_id = query.data.split(':')[1]
        logger.info(f"Admin deleting category {category_id} by user {query.from_user.id}")
        
        category = next((c for c in db.get_categories() if c['id'] == category_id), None)
        if not category:
            logger.error(f"Category {category_id} not found")
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # Check if category has products
        products = db.get_products_by_category(category_id)
        if products:
            await query.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–≤–∞—Ä—ã.\n"
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.",
                show_alert=True
            )
            return
        
        await state.set_state(CategoryForm.confirm_delete)
        await state.update_data(category_id=category_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category['name']}'?",
            reply_markup=get_confirmation_keyboard(
                confirm_callback=f"confirm_category_delete:{category_id}",
                cancel_callback="cancel_category_delete"
            )
        )
    except Exception as e:
        logger.error(f"Error in admin_category_delete_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)

# ===== –¢–û–í–ê–†–´ =====
@dp.callback_query(F.data == "admin_products")
async def admin_products_handler(query: types.CallbackQuery, state: FSMContext) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        logger.info(f"Products menu opened by user {query.from_user.id}")
        await safe_clear_state(state)
        
        categories = db.get_categories()
        buttons = []
        
        # Add category buttons
        for cat in categories:
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"üì¶ {cat['name']}", 
                    callback_data=f"product_category:{cat['id']}"
                )
            ])
        
        # Add search and back buttons
        buttons.extend([
            [types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_search_products")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin")]
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
        if not categories:
            text = "üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤."
        
        await query.answer()
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_products_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)

@dp.callback_query(F.data.startswith("admin_products_category:"))
async def admin_products_category_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        category_id = query.data.split(':')[1]
        logger.info(f"Admin viewing products in category {category_id} by user {query.from_user.id}")
        
        products = db.get_products_by_category(category_id)
        category = next((c for c in db.get_categories() if c['id'] == category_id), None)
        
        if not category:
            logger.error(f"Category {category_id} not found")
            await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        text = (
            f"üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
        )
        
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_products_list_keyboard(products, category_id)
        )
    except Exception as e:
        logger.error(f"Error in admin_products_category_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)

@dp.callback_query(F.data.startswith("create_product:"))
async def create_product_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not await check_admin_access(callback.from_user.id, callback):
            return
        
        category_id = callback.data.split(':')[1]
        logger.info(f"Product creation started in category {category_id} by user {callback.from_user.id}")
        
        await safe_clear_state(state)
        await state.set_state(ProductForm.name)
        await state.update_data(category_id=category_id)
        
        await safe_edit_message(
            message=callback.message,
            text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_cancel_keyboard("cancel_product_creation")
        )
    except Exception as e:
        logger.error(f"Error in create_product_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)

@dp.callback_query(F.data.startswith("admin_product_edit:"))
async def admin_product_edit_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        product_id = query.data.split(':')[1]
        logger.info(f"Admin editing product {product_id} by user {query.from_user.id}")
        
        product = next((p for p in db.get_all_products() if p['id'] == product_id), None)
        if not product:
            logger.error(f"Product {product_id} not found")
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.set_state(ProductForm.edit_name)
        await state.update_data(product_id=product_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard("cancel_product_edit")
        )
    except Exception as e:
        logger.error(f"Error in admin_product_edit_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)

@dp.callback_query(F.data.startswith("admin_product_delete:"))
async def admin_product_delete_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        product_id = query.data.split(':')[1]
        logger.info(f"Admin deleting product {product_id} by user {query.from_user.id}")
        
        product = next((p for p in db.get_all_products() if p['id'] == product_id), None)
        if not product:
            logger.error(f"Product {product_id} not found")
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.set_state(ProductForm.confirm_delete)
        await state.update_data(product_id=product_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä '{product['name']}'?",
            reply_markup=get_confirmation_keyboard(
                confirm_callback=f"confirm_product_delete:{product_id}",
                cancel_callback="cancel_product_delete"
            )
        )
    except Exception as e:
        logger.error(f"Error in admin_product_delete_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)

# ===== –¢–ï–°–¢–´ =====
@dp.callback_query(F.data == "admin_tests")
async def admin_tests_handler(query: types.CallbackQuery, state: FSMContext) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        logger.info(f"Tests menu opened by user {query.from_user.id}")
        await safe_clear_state(state)
        
        tests = db.get_tests_list()
        buttons = []
        
        # Add test buttons
        for test in tests:
            buttons.append([
                types.InlineKeyboardButton(
                    text=f"‚úèÔ∏è {test['title']}", 
                    callback_data=f"test_edit:{test['id']}"
                )
            ])
        
        # Add create and back buttons
        buttons.extend([
            [types.InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="create_test")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin")]
        ])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
        if not tests:
            text = "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</b>\n\n–¢–µ—Å—Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç:"
        
        await query.answer()
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_tests_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤", show_alert=True)

@dp.callback_query(F.data.startswith("admin_test_edit:"))
async def admin_test_edit_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        test_id = query.data.split(':')[1]
        logger.info(f"Admin editing test {test_id} by user {query.from_user.id}")
        
        test = next((t for t in db.get_tests_list() if t['id'] == test_id), None)
        if not test:
            logger.error(f"Test {test_id} not found")
            await query.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.set_state(TestForm.edit_title)
        await state.update_data(test_id=test_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n\n–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {test['title']}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard("cancel_test_edit")
        )
    except Exception as e:
        logger.error(f"Error in admin_test_edit_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞", show_alert=True)

@dp.callback_query(F.data.startswith("admin_test_delete:"))
async def admin_test_delete_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        test_id = query.data.split(':')[1]
        logger.info(f"Admin deleting test {test_id} by user {query.from_user.id}")
        
        test = next((t for t in db.get_tests_list() if t['id'] == test_id), None)
        if not test:
            logger.error(f"Test {test_id} not found")
            await query.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await state.set_state(TestForm.confirm_delete)
        await state.update_data(test_id=test_id)
        
        await safe_edit_message(
            message=query.message,
            text=f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç '{test['title']}'?",
            reply_markup=get_confirmation_keyboard(
                confirm_callback=f"confirm_test_delete:{test_id}",
                cancel_callback="cancel_test_delete"
            )
        )
    except Exception as e:
        logger.error(f"Error in admin_test_delete_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞", show_alert=True)

@dp.callback_query(F.data == "create_test")
async def create_test_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        logger.info(f"Test creation started by user {query.from_user.id}")
        await state.set_state(TestForm.title)
        
        await safe_edit_message(
            message=query.message,
            text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:",
            reply_markup=get_cancel_keyboard("cancel_test_creation")
        )
    except Exception as e:
        logger.error(f"Error in create_test_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞", show_alert=True)

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
@dp.callback_query(F.data == "admin_stats")
async def admin_stats_handler(query: types.CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        if not await check_admin_access(query.from_user.id, query):
            return
        
        logger.info(f"Stats menu opened by user {query.from_user.id}")
        await safe_clear_state(state)
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_stats_users"),
                types.InlineKeyboardButton(text="üìù –¢–µ—Å—Ç—ã", callback_data="admin_stats_tests")
            ],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin")]
        ])
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        
        await query.answer()
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in admin_stats_handler: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–û–í =====
@dp.callback_query(F.data == "admin_search_products")
async def admin_search_products_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)  # Clear any existing state first
    await state.set_state(ProductForm.search)
    await safe_edit_message(
        message=query.message,
        text="üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=get_cancel_keyboard("cancel_search")
    )

@dp.message(ProductForm.search)
async def process_product_search(
    message: types.Message,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if not await check_admin_access(message.from_user.id):
        return
    
    query_text = message.text.strip()
    if not query_text:
        await message.answer("‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    products = db.search_products(query_text)
    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await safe_clear_state(state)
        return
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
    for product in products:
        text += f"‚Ä¢ {product['name']} (ID: {product['id']})\n"
    
    await message.answer(text, parse_mode=ParseMode.HTML)
    await safe_clear_state(state)

@dp.message(CategoryForm.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not await check_admin_access(message.from_user.id):
        return
    
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    try:
        db.add_category(name)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        logger.error(f"Failed to create category: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    await safe_clear_state(state)

# ===== –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô =====
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await safe_clear_state(state)
    await query.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await send_admin_menu(query)

__all__ = [
    'admin_handler',
    'admin_categories_handler',
    'create_category_handler',
    'admin_category_edit_handler',
    'admin_category_delete_handler',
    'admin_products_handler',
    'admin_products_category_handler',
    'create_product_handler',
    'admin_product_edit_handler',
    'admin_product_delete_handler',
    'admin_tests_handler',
    'admin_test_edit_handler',
    'admin_test_delete_handler',
    'create_test_handler',
    'admin_stats_handler',
    'admin_search_products_handler'
]
