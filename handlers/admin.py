
from aiogram import F, types
import uuid
import logging
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from utils.message_utils import safe_edit_message
from sqlite_db import (
    add_test, get_categories, add_category,
    get_products_by_category, get_tests_list,
    search_products
)
from config import ADMIN_IDS
from utils.keyboards import (
    get_admin_keyboard, get_admin_categories_keyboard,
    get_admin_products_keyboard, get_admin_products_list_keyboard,
    get_admin_tests_keyboard, get_admin_stats_keyboard,
    get_cancel_keyboard
)
from dispatcher import dp
from states import CategoryForm, ProductForm, TestForm

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CategoryForm(StatesGroup):
    name = State()
    description = State()
    image = State()

class ProductForm(StatesGroup):
    name = State()
    category = State()
    description = State()
    price = State()
    storage = State()
    images = State()
    video = State()

class TestForm(StatesGroup):
    title = State()
    description = State()
    category = State()
    questions = State()
    passing_score = State()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def check_admin_access(user_id: int, query: types.CallbackQuery = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if user_id not in ADMIN_IDS:
        msg = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"
        if query:
            await query.answer(msg)
        return False
    return True

async def admin_check_middleware(handler, event, data):
    if event.from_user.id not in ADMIN_IDS:
        await event.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    return await handler(event, data)

async def send_admin_menu(
    target: types.Message | types.CallbackQuery,
    text: str = "üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if isinstance(target, types.CallbackQuery):
        await target.answer()
        await safe_edit_message(
            message=target.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )
    else:
        await target.answer(
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@dp.message(Command("admin"))
@dp.callback_query(F.data == "admin")
async def admin_handler(
    update: types.Message | types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    user_id = update.from_user.id
    if not await check_admin_access(user_id, update if isinstance(update, types.CallbackQuery) else None):
        return
    
    await state.clear()
    await send_admin_menu(update)

# ===== –ö–ê–¢–ï–ì–û–†–ò–ò =====
@dp.callback_query(F.data == "admin_categories"))
async def admin_categories_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await state.clear()
    categories = get_categories()
    
    await safe_edit_message(
        message=query.message,
        text="üìÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_categories_keyboard(categories)
    )

@dp.callback_query(F.data == "create_category"))
async def create_category_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not await check_admin_access(callback.from_user.id, callback):
        return
    
    await state.set_state(CategoryForm.name)
    await safe_edit_message(
        message=callback.message,
        text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_cancel_keyboard("cancel_category_creation")
    )

# ===== –¢–û–í–ê–†–´ =====
@dp.callback_query(F.data.startswith("admin_products"))
async def admin_products_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await state.clear()
    parts = query.data.split(':')
    
    if len(parts) > 1 and parts[0] == 'admin_products_category':
        # –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = parts[1]
        products = get_products_by_category(category_id)
        category = next((c for c in get_categories() if c['id'] == category_id), None)
        
        text = (
            f"üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
        )
        
        await safe_edit_message(
            message=query.message,
            text=text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_products_list_keyboard(products, category_id)
        )
    else:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
        categories = get_categories()
        await safe_edit_message(
            message=query.message,
            text="üçé <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_products_keyboard(categories)
        )

@dp.callback_query(F.data == "create_product"))
async def create_product_handler(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not await check_admin_access(callback.from_user.id, callback):
        return
    
    await state.set_state(ProductForm.name)
    await safe_edit_message(
        message=callback.message,
        text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_cancel_keyboard("cancel_product_creation")
    )

# ===== –¢–ï–°–¢–´ =====
@dp.callback_query(F.data == "admin_tests"))
async def admin_tests_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await state.clear()
    tests = get_tests_list()
    
    await safe_edit_message(
        message=query.message,
        text="üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_tests_keyboard(tests),
        inline_message_id=str(uuid.uuid4())
    )

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
@dp.callback_query(F.data.startswith("admin_stats"))
async def admin_stats_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await state.clear()
    parts = query.data.split('_')
    
    if len(parts) > 2:
        if parts[2] == 'users':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_all_users()
            admin_count = sum(1 for u in users if u.get('is_admin'))
            
            text = (
                "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
                f"–û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users) - admin_count}\n\n"
                "<i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>"
            )
        elif parts[2] == 'tests':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
            text = (
                "üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                "<i>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>"
            )
        else:
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    else:
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    
    await safe_edit_message(
        message=query.message,
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_stats_keyboard()
    )

# ===== –ü–û–ò–°–ö –¢–û–í–ê–†–û–í =====
@dp.callback_query(F.data == "admin_search_products"))
async def admin_search_products_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    if not await check_admin_access(query.from_user.id, query):
        return
    
    await state.set_state(ProductForm.search)
    await safe_edit_message(
        message=query.message,
        text="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard("cancel_search")
    )

@dp.message(ProductForm.search)
async def process_product_search(
    message: types.Message,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    search_query = message.text.strip()
    if len(search_query) < 2:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    products = search_products(search_query)
    
    if not products:
        await message.answer("üîé –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    text = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
    for product in products[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        text += f"‚ñ™Ô∏è {product['name']} (ID: {product['id']})\n"
    
    await message.answer(
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_products_list_keyboard(products)
    )
    await state.clear()

@dp.message(CategoryForm.name)
async def process_name(message: Message, state: FSMContext):
    if len(message.text) > 100:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    await state.update_data(name=message.text)

# ===== –û–¢–ú–ï–ù–ê –î–ï–ô–°–¢–í–ò–ô =====
@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_handler(
    query: types.CallbackQuery,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π"""
    await state.clear()
    await send_admin_menu(query, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

__all__ = [
    'admin_handler',
    'admin_categories_handler',
    'create_category_handler',
    'admin_products_handler',
    'create_product_handler',
    'admin_tests_handler',
    'admin_stats_handler',
    'admin_search_products_handler'
]
