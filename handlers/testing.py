
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import firebase_db
from utils.keyboards import get_tests_keyboard, get_test_question_keyboard, get_test_result_keyboard

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_test_sessions = {}

async def testing_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ Firebase
    tests = firebase_db.get_tests_list()
    
    if query:
        await query.answer()
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π:",
            reply_markup=get_tests_keyboard(tests)
        )
    else:
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π:",
            reply_markup=get_tests_keyboard(tests)
        )

async def test_selection_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = firebase_db.get_test(test_id)
    
    if not test:
        await query.edit_message_text(
            text="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    user_test_sessions[user_id] = {
        'test_id': test_id,
        'current_question': 0,
        'answers': [],
        'score': 0
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_info = f"<b>{test['title']}</b>\n\n"
    test_info += f"{test.get('description', '')}\n\n"
    test_info += f"–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(test['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
    test_info += f"–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {test['passing_score']}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
    test_info += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
    
    await query.edit_message_text(
        text=test_info,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"test_question:{test_id}:start")]
        ])
    )

async def test_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
    parts = query.data.split(':')
    test_id = parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
    user_id = update.effective_user.id
    if user_id not in user_test_sessions:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
        await query.edit_message_text(
            text="–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
            ])
        )
        return
    
    session = user_test_sessions[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = firebase_db.get_test(test_id)
    
    if not test:
        await query.edit_message_text(
            text="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
            ])
        )
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if parts[2] == 'start':
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        session['current_question'] = 0
        session['answers'] = []
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_idx = int(parts[2])
        answer_idx = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        is_correct = (answer_idx == test['questions'][question_idx]['correct_option'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        session['answers'].append({
            'question_id': question_idx,
            'selected_option': answer_idx,
            'is_correct': is_correct
        })
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
        if is_correct:
            session['score'] += 1
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        session['current_question'] = question_idx + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if session['current_question'] >= len(test['questions']):
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        attempt_data = {
            'user_id': str(user_id),
            'test_id': test_id,
            'score': session['score'],
            'max_score': len(test['questions']),
            'answers': session['answers'],
            'completed': True
        }
        attempt_id = firebase_db.save_test_attempt(attempt_data)
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞
        await query.edit_message_text(
            text="–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
            reply_markup=None
        )
        
        await test_result_handler(update, context)
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_q = test['questions'][session['current_question']]
    question_text = f"<b>–í–æ–ø—Ä–æ—Å {session['current_question']+1} –∏–∑ {len(test['questions'])}</b>\n\n"
    question_text += current_q['text']
    
    await query.edit_message_text(
        text=question_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_test_question_keyboard(
            session['current_question'], 
            current_q['options'], 
            test_id
        )
    )

async def test_result_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
    user_id = update.effective_user.id
    if user_id not in user_test_sessions:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞
        message_text = "–°–µ—Å—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        if query:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
                ])
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
                ])
            )
        return
    
    session = user_test_sessions[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = firebase_db.get_test(session['test_id'])
    
    if not test:
        message_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if query:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
                ])
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data="testing")]
                ])
            )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    score = session['score']
    max_score = len(test['questions'])
    percentage = (score / max_score) * 100
    passed = percentage >= test['passing_score']
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ \"{test['title']}\"</b>\n\n"
    result_text += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {max_score} ({percentage:.1f}%)\n"
    result_text += f"–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test['passing_score']}%\n\n"
    
    if passed:
        result_text += "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç.</b>"
    else:
        result_text += "‚ùå <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_test_sessions[user_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if query:
        await query.edit_message_text(
            text=result_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_test_result_keyboard()
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=result_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_test_result_keyboard()
        )
