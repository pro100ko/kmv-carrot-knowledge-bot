import logging
from typing import Dict, Optional
from aiogram import types
from aiogram.enums import ParseMode
from sqlite_db import db  # Import the database instance
from utils.keyboards import (
    get_tests_keyboard,
    get_test_question_keyboard,
    get_test_result_keyboard,
    get_back_to_tests_keyboard
)
from utils.message_utils import safe_edit_message

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_test_sessions: Dict[int, Dict] = {}

class TestSessionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏"""
    
    @staticmethod
    def start_session(user_id: int, test_id: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        user_test_sessions[user_id] = {
            'test_id': test_id,
            'current_question': 0,
            'answers': [],
            'score': 0,
            'start_time': None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        }
        return user_test_sessions[user_id]
    
    @staticmethod
    def get_session(user_id: int) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_test_sessions.get(user_id)
    
    @staticmethod
    def end_session(user_id: int) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in user_test_sessions:
            del user_test_sessions[user_id]

async def testing_handler(
    update: types.Message | types.CallbackQuery,
    context=None
) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        tests = db.get_tests_list()  # Use db instance
        if not tests:
            await handle_no_tests(update)
            return
        
        text = "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
        keyboard = get_tests_keyboard(tests)
        
        if isinstance(update, types.CallbackQuery):
            await safe_edit_message(
                message=update.message,
                text=text,
                reply_markup=keyboard
            )
            await update.answer()
        else:
            await update.answer(
                text=text,
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in testing handler: {e}")
        await handle_error(update)

async def test_selection_handler(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
    await query.answer()
    test_id = query.data.split(':')[1]
    test = db.get_test(test_id)  # Use db instance
    
    if not test:
        await safe_edit_message(
            message=query.message,
            text="‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_to_tests_keyboard()
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    session = TestSessionManager.start_session(query.from_user.id, test_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_info = [
        f"üìö <b>{test['title']}</b>",
        f"\n\n{test.get('description', '')}",
        f"\n\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test['questions'])}",
        f"\nüìä –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test['passing_score']}%",
        "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
    ]
    
    await safe_edit_message(
        message=query.message,
        text="".join(test_info),
        parse_mode=ParseMode.HTML,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                    callback_data=f"test_question:{test_id}:start"
                )
            ]]
        )
    )

async def test_question_handler(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞"""
    await query.answer()
    user_id = query.from_user.id
    parts = query.data.split(':')
    test_id = parts[1]
    action = parts[2]
    
    session = TestSessionManager.get_session(user_id)
    if not session or session['test_id'] != test_id:
        await handle_session_expired(query)
        return
    
    test = db.get_test(test_id)  # Use db instance
    if not test:
        await handle_test_not_found(query)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def test_answer_handler(query: CallbackQuery):
    _, test_id, question_idx, answer_idx = query.data.split(':')
    session = TestSessionManager.get_session(query.from_user.id)
    if not session:
        await query.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        return
    
    question = get_question(test_id, question_idx)
    if not question:
        await query.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    session['answers'].append({
        'question_idx': question_idx,
        'answer_idx': answer_idx,
        'is_correct': answer_idx == question['correct']
    })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if session['current_question'] >= len(test['questions']):
        await finish_test_session(query, session, test)
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    question = test['questions'][session['current_question']]
    question_text = (
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {session['current_question']+1}/{len(test['questions'])}</b>\n\n"
        f"{question['text']}"
    )
    
    await safe_edit_message(
        message=query.message,
        text=question_text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_test_question_keyboard(
            session['current_question'],
            question['options'],
            test_id
        )
    )

async def test_result_handler(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
    await query.answer()
    user_id = query.from_user.id
    session = TestSessionManager.get_session(user_id)
    
    if not session:
        await handle_session_expired(query)
        return
    
    test = db.get_test(session['test_id'])
    if not test:
        await handle_test_not_found(query)
        return
    
    score = session['score']
    max_score = len(test['questions'])
    percentage = (score / max_score) * 100
    passed = percentage >= test['passing_score']
    
    result_text = [
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ \"{test['title']}\"</b>",
        f"\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{max_score} ({percentage:.1f}%)",
        f"\nüéØ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test['passing_score']}%",
        "\n\nüéâ <b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!</b>" if passed else "\n\n‚ùå <b>–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>"
    ]
    
    # –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
    attempts = get_test_attempts(user_id, session['test_id'])
    if attempts:
        result_text.append("\n\nüìÖ –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏:")
        for idx, attempt in enumerate(attempts[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ø—ã—Ç–∫–∏
            attempt_percent = (attempt['score'] / attempt['max_score']) * 100
            result_text.append(
                f"\n{idx}. {attempt['score']}/{attempt['max_score']} ({attempt_percent:.1f}%) - "
                f"{'‚úÖ' if attempt_percent >= test['passing_score'] else '‚ùå'}"
            )
    
    TestSessionManager.end_session(user_id)
    
    await safe_edit_message(
        message=query.message,
        text="".join(result_text),
        parse_mode=ParseMode.HTML,
        reply_markup=get_test_result_keyboard(test_id, passed)
    )

async def finish_test_session(
    query: types.CallbackQuery,
    session: Dict,
    test: Dict
) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    attempt_data = {
        'user_id': str(query.from_user.id),
        'test_id': session['test_id'],
        'score': session['score'],
        'max_score': len(test['questions']),
        'answers': session['answers'],
        'completed': True
    }
    
    if not save_test_attempt(attempt_data):
        logger.error(f"Failed to save test attempt for user {query.from_user.id}")
    
    await safe_edit_message(
        message=query.message,
        text="üìù –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
        reply_markup=None
    )
    await test_result_handler(query)

async def handle_no_tests(target: types.Message | types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–æ–≤"""
    text = "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
    if isinstance(target, types.CallbackQuery):
        await safe_edit_message(
            message=target.message,
            text=text,
            reply_markup=get_back_to_tests_keyboard()
        )
        await target.answer()
    else:
        await target.answer(text)

async def handle_session_expired(query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏"""
    await safe_edit_message(
        message=query.message,
        text="‚ö†Ô∏è –í–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_back_to_tests_keyboard()
    )

async def handle_test_not_found(query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–∞"""
    await safe_edit_message(
        message=query.message,
        text="‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
        reply_markup=get_back_to_tests_keyboard()
    )

async def handle_error(target: types.Message | types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    if isinstance(target, types.CallbackQuery):
        await safe_edit_message(
            message=target.message,
            text=text,
            reply_markup=get_back_to_tests_keyboard()
        )
        await target.answer()
    else:
        await target.answer(text)
