from aiogram import types
from aiogram.enums import ParseMode
from aiogram.utils.media_group import MediaGroupBuilder
from typing import Optional, Dict, List

from sqlite_db import db  # Import the database instance
from utils.keyboards import (
    get_categories_keyboard,
    get_products_keyboard,
    get_product_navigation_keyboard,
    get_back_to_categories_keyboard
)
from config import MIN_SEARCH_LENGTH, MAX_SEARCH_RESULTS
from utils.message_utils import safe_edit_message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
product_view_state: Dict[int, Dict[str, int]] = {}  # {user_id: {product_id: current_image_index}}

class ProductViewer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    
    @staticmethod
    def get_current_state(user_id: int, product_id: int) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–∞"""
        if user_id not in product_view_state:
            product_view_state[user_id] = {}
        if product_id not in product_view_state[user_id]:
            product_view_state[user_id][product_id] = 0
        return product_view_state[user_id]
    
    @staticmethod
    def update_image_index(user_id: int, product_id: int, delta: int) -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        state = ProductViewer.get_current_state(user_id, product_id)
        if product_id not in state:
            state[product_id] = 0
        images_count = len(db.get_product(product_id).get('image_urls', []))
        state[product_id] = (state[product_id] + delta) % images_count if images_count > 0 else 0
        return state[product_id]
    
    @staticmethod
    def reset_state(user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in product_view_state:
            del product_view_state[user_id]

async def knowledge_base_handler(
    update: types.Message | types.CallbackQuery,
    context=None
) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    categories = db.get_categories()
    if not categories:
        text = "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤."
        keyboard = None
    else:
        text = "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:"
        keyboard = get_categories_keyboard(categories)
    
    if isinstance(update, types.CallbackQuery):
        await safe_edit_message(
            message=update.message,
            text=text,
            reply_markup=keyboard
        )
        await update.answer()
    else:
        await update.answer(
            text=text,
            reply_markup=keyboard
        )

async def category_handler(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await query.answer()
    category_id = int(query.data.split(':')[1])
    products = db.get_products_by_category(category_id)
    category = next(
        (c for c in db.get_categories() if c['id'] == category_id),
        {'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}
    )
    
    if not products:
        await safe_edit_message(
            message=query.message,
            text=f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category['name']}\" –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_back_to_categories_keyboard()
        )
        return
    
    await safe_edit_message(
        message=query.message,
        text=f"üì¶ <b>{category['name']}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=get_products_keyboard(products, category_id)
    )

async def product_handler(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
    await query.answer()
    user_id = query.from_user.id
    action, product_id = query.data.split(':')[:2]
    product_id = int(product_id)
    product = db.get_product(product_id)
    
    if not product:
        await safe_edit_message(
            message=query.message,
            text="‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_back_to_categories_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    if action == "product":
        ProductViewer.get_current_state(user_id, product_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    elif action == "product_next":
        ProductViewer.update_image_index(user_id, product_id, 1)
    elif action == "product_prev":
        ProductViewer.update_image_index(user_id, product_id, -1)
    
    current_index = product_view_state[user_id][product_id]
    images = product.get('image_urls', [])
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    text_parts = [
        f"<b>üè∑ {product['name']}</b>",
        f"\nüìù {product['description']}" if product.get('description') else "",
        f"\nüí∞ <b>–¶–µ–Ω–∞:</b> {product['price_info']}" if product.get('price_info') else "",
        f"\n‚ùÑÔ∏è <b>–•—Ä–∞–Ω–µ–Ω–∏–µ:</b> {product['storage_conditions']}" if product.get('storage_conditions') else "",
        f"\n\nüñº –§–æ—Ç–æ {current_index + 1}/{len(images)}" if len(images) > 1 else ""
    ]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º
    await safe_edit_message(
        message=query.message,
        text="".join(text_parts),
        parse_mode=ParseMode.HTML,
        reply_markup=get_product_navigation_keyboard(product_id, product['category_id'], len(images))
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ)
    await send_product_media(query.message, product, current_index)

async def send_product_media(
    message: types.Message,
    product: Dict,
    image_index: int = 0
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞"""
    images = product.get('image_urls', [])
    video_url = product.get('video_url')
    
    try:
        if images:
            if len(images) > 1:
                # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media_group = MediaGroupBuilder()
                for img in images:
                    media_group.add_photo(media=img)
                await message.answer_media_group(media=media_group.build())
            else:
                # –î–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await message.answer_photo(
                    photo=images[image_index],
                    caption=f"–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: {product['name']}"
                )
        
        if video_url:
            await message.answer_video(
                video=video_url,
                caption=f"–í–∏–¥–µ–æ –æ —Ç–æ–≤–∞—Ä–µ: {product['name']}"
            )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–∞")

async def search_handler(
    message: types.Message,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    if message.text == "üîç –ü–æ–∏—Å–∫":
        await message.answer(
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)\n"
            "–§–æ—Ä–º–∞—Ç: <code>üîç –ù–∞–∑–≤–∞–Ω–∏–µ</code>",
            parse_mode=ParseMode.HTML
        )
        return
    
    query_text = message.text[2:].strip()
    if len(query_text) < MIN_SEARCH_LENGTH:
        await message.answer(
            f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {MIN_SEARCH_LENGTH} —Å–∏–º–≤–æ–ª–∞",
            reply_markup=get_back_to_categories_keyboard()
        )
        return
    
    products = db.search_products(query_text)[:MAX_SEARCH_RESULTS]
    
    if not products:
        await message.answer(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query_text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_back_to_categories_keyboard()
        )
        return
    
    response = [f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ \"{query_text}\":\n"]
    buttons = []
    
    for idx, product in enumerate(products, 1):
        response.append(f"{idx}. {product['name']}")
        buttons.append([
            types.InlineKeyboardButton(
                text=product['name'],
                callback_data=f"product:{product['id']}"
            )
        ])
    
    buttons.append([
        types.InlineKeyboardButton(
            text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="knowledge_base"
        )
    ])
    
    await message.answer(
        "\n".join(response),
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )
