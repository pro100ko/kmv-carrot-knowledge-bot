
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import firebase_db
from utils.keyboards import get_categories_keyboard, get_products_keyboard, get_product_navigation_keyboard

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
product_image_indices = {}

async def knowledge_base_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –∏–∑ inline –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Firebase
    categories = firebase_db.get_categories()
    
    if query:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await query.answer()
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await update.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
            reply_markup=get_categories_keyboard(categories)
        )

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = query.data.split(':')[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = firebase_db.get_products_by_category(category_id)
    
    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
    if products:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = firebase_db.get_categories()
        selected_category = next((c for c in categories if c['id'] == category_id), None)
        
        category_name = selected_category['name'] if selected_category else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        
        await query.edit_message_text(
            text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category_name}\":",
            reply_markup=get_products_keyboard(products, category_id)
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        await query.edit_message_text(
            text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="knowledge_base")]
            ])
        )

async def product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ñ–æ—Ç–æ
    parts = query.data.split(':')
    command = parts[0]
    product_id = parts[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product = firebase_db.get_product(product_id)
    
    if not product:
        await query.edit_message_text(
            text="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="knowledge_base")]
            ])
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if command == "product":
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        product_image_indices[product_id] = 0
    elif command == "product_next":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        current_index = product_image_indices.get(product_id, 0)
        product_image_indices[product_id] = (current_index + 1) % len(product['image_urls']) if product['image_urls'] else 0
    elif command == "product_prev":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        current_index = product_image_indices.get(product_id, 0)
        product_image_indices[product_id] = (current_index - 1) % len(product['image_urls']) if product['image_urls'] else 0
    
    # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    current_index = product_image_indices.get(product_id, 0)
    
    # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_info = f"<b>{product['name']}</b>\n\n"
    
    if product.get('description'):
        product_info += f"{product['description']}\n\n"
    
    if product.get('price_info'):
        product_info += f"<b>–¶–µ–Ω–∞:</b> {product['price_info']}\n"
    
    if product.get('storage_conditions'):
        product_info += f"<b>–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b> {product['storage_conditions']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if product.get('image_urls') and len(product['image_urls']) > 1:
        product_info += f"\n–§–æ—Ç–æ {current_index + 1}/{len(product['image_urls'])}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if product.get('image_urls') and len(product['image_urls']) > 0:
        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = product['image_urls'][current_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = get_product_navigation_keyboard(product_id, product['category_id'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await query.edit_message_text(
            text=product_info,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=image_url,
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}",
                reply_markup=keyboard
            )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"back_to_products:{product['category_id']}")]
        ])
        
        await query.edit_message_text(
            text=product_info,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if product.get('video_url'):
        try:
            await context.bot.send_video(
                chat_id=update.effective_chat.id,
                video=product['video_url'],
                caption="–í–∏–¥–µ–æ –æ —Ç–æ–≤–∞—Ä–µ"
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ: {str(e)}"
            )

async def search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    from config import MIN_SEARCH_LENGTH, MAX_SEARCH_RESULTS
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —É–∂–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if update.message.text == "üîç –ü–æ–∏—Å–∫":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).\n"
            "–§–æ—Ä–º–∞—Ç: üîç –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query_text = update.message.text[2:].strip()  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª üîç –∏ –ø—Ä–æ–±–µ–ª—ã
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞
    if len(query_text) < MIN_SEARCH_LENGTH:
        await update.message.reply_text(
            f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {MIN_SEARCH_LENGTH} —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –§–æ—Ä–º–∞—Ç: üîç –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    products = firebase_db.search_products(query_text)
    
    if products:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        products = products[:MAX_SEARCH_RESULTS]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        buttons = []
        for product in products:
            buttons.append([
                InlineKeyboardButton(product['name'], callback_data=f"product:{product['id']}")
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([
            InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="knowledge_base")
        ])
        
        await update.message.reply_text(
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{query_text}\":",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await update.message.reply_text(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{query_text}\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="knowledge_base")]
            ])
        )
