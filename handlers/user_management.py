import logging
from aiogram import types
from aiogram.enums import ParseMode
from typing import Optional, Union
from sqlite_db import (
    get_user,
    register_user,
    get_test_attempts,
    get_user_test_history,
    set_admin_status
)
from config import ADMIN_IDS
from utils.keyboards import get_main_keyboard
from utils.message_utils import safe_send_message

logger = logging.getLogger(__name__)

class UserManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    async def register_or_update_user(user: types.User) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = {
            'telegram_id': user.id,
            'first_name': user.first_name or '',
            'last_name': user.last_name or '',
            'username': user.username or '',
            'is_admin': user.id in ADMIN_IDS
        }
        
        try:
            return register_user(user_data)
        except Exception as e:
            logger.error(f"Failed to register user {user.id}: {e}")
            return False

    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_IDS

async def start(
    update: Union[types.Message, types.CallbackQuery],
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.from_user
        is_admin = UserManager.is_admin(user.id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await UserManager.register_or_update_user(user):
            await handle_user_registration_error(update)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´–ú–æ—Ä–∫–æ–≤–∫–∞ –ö–ú–í¬ª, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            "ü•ï –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\n"
            "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_send_message(
            target=update,
            text=welcome_message,
            reply_markup=get_main_keyboard(is_admin)
        )

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await handle_error(update)

async def register_user_handler(
    message: types.Message,
    context=None
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–∞–Ω–¥"""
    try:
        user = message.from_user
        is_admin = UserManager.is_admin(user.id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not await UserManager.register_or_update_user(user):
            await handle_user_registration_error(message)
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        command = message.text.lower().strip()
        
        if command == "üçé –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
            from handlers.knowledge_base import knowledge_base_handler
            await knowledge_base_handler(message, context)
        elif command == "üìù —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
            from handlers.testing import testing_handler
            await testing_handler(message, context)
        elif command == "‚öôÔ∏è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and is_admin:
            from handlers.admin import admin_handler
            await admin_handler(message, context)
        else:
            await show_main_menu(message, is_admin)

    except Exception as e:
        logger.error(f"Error in register_user_handler: {e}")
        await handle_error(message)

async def show_main_menu(
    target: Union[types.Message, types.CallbackQuery],
    is_admin: bool = False
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await safe_send_message(
        target=target,
        text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(is_admin)
    )

async def handle_user_registration_error(
    target: Union[types.Message, types.CallbackQuery]
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await safe_send_message(
        target=target,
        text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

async def handle_error(
    target: Union[types.Message, types.CallbackQuery]
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    await safe_send_message(
        target=target,
        text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

async def get_user_profile(
    query: types.CallbackQuery,
    context=None
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        user = query.from_user
        user_data = get_user(user.id)
        if not user_data:
            await query.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = [
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>",
            f"\n\nüÜî ID: {user.id}",
            f"\nüëÅ‚Äçüó® –ò–º—è: {user_data.get('first_name', '')}",
            f"\nüë• –§–∞–º–∏–ª–∏—è: {user_data.get('last_name', '')}",
            f"\nüì± Username: @{user_data.get('username', '')}" if user_data.get('username') else "",
            f"\nüéñ –°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if UserManager.is_admin(user.id) else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤
        attempts = get_test_attempts(user.id)
        if attempts:
            passed = sum(1 for a in attempts if a['score'] / a['max_score'] >= 0.7)
            profile_text.extend([
                f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤</b>",
                f"\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(attempts)}",
                f"\nüèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {max(a['score'] for a in attempts)}/{attempts[0]['max_score']}"
            ])

        await safe_edit_message(
            message=query.message,
            text="".join(profile_text),
            parse_mode=ParseMode.HTML,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )
            ]])
        )
        await query.answer()

    except Exception as e:
        logger.error(f"Error in get_user_profile: {e}")
        await handle_error(query)
