import logging
import os
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import Command, CommandStart
import asyncio
from aiohttp import web
from aiogram import Bot
from dispatcher import dp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp
from .handlers import admin, knowledge_base, testing  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ dp

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import BOT_TOKEN, WEBHOOK_URL, WEBHOOK_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

from handlers.admin import (
    admin_handler,
    admin_categories_handler,
    admin_products_handler,
    create_category_handler,
    create_product_handler
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
sqlite_initialized = False
try:
    import sqlite_db
    if sqlite_db.SQLITE_AVAILABLE:
        sqlite_initialized = True
        logger.info("SQLite —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        logger.error("SQLite –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)
except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite: {e}")
    logger.error("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    sys.exit(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@dp.message(CommandStart())
@dp.message(Command("help"))
async def start_command(message: types.Message):
    from handlers.user_management import start
    await start(message, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def any_message(message: types.Message):
    from handlers.user_management import register_user_handler
    await register_user_handler(message, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@dp.callback_query(F.data == "knowledge_base")
async def kb_callback(callback_query: types.CallbackQuery):
    from handlers.knowledge_base import knowledge_base_handler
    await knowledge_base_handler(callback_query, None)

@dp.callback_query(F.data.startswith("category:"))
async def cat_callback(callback_query: types.CallbackQuery):
    from handlers.knowledge_base import category_handler
    await category_handler(callback_query, None)

@dp.callback_query(F.data.startswith("product:"))
async def prod_callback(callback_query: types.CallbackQuery):
    from handlers.knowledge_base import product_handler
    await product_handler(callback_query, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data == "testing")
async def testing_callback(callback_query: types.CallbackQuery):
    from handlers.testing import testing_handler
    await testing_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_select:"))
async def test_select_callback(callback_query: types.CallbackQuery):
    from handlers.testing import test_selection_handler
    await test_selection_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_answer:"))
async def test_answer_callback(callback_query: types.CallbackQuery):
    from handlers.testing import test_question_handler
    await test_question_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_result:"))
async def test_result_callback(callback_query: types.CallbackQuery):
    from handlers.testing import test_result_handler
    await test_result_handler(callback_query, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(F.data == "admin")
async def admin_callback(callback_query: types.CallbackQuery):
    from handlers.admin import admin_handler
    await admin_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_categories"))
async def admin_cat_callback(callback_query: types.CallbackQuery):
    from handlers.admin import admin_categories_handler
    await admin_categories_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_products"))
async def admin_prod_callback(callback_query: types.CallbackQuery):
    from handlers.admin import admin_products_handler
    await admin_products_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_tests"))
async def admin_test_callback(callback_query: types.CallbackQuery):
    from handlers.admin import admin_tests_handler
    await admin_tests_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_stats"))
async def admin_stats_callback(callback_query: types.CallbackQuery):
    from handlers.admin import admin_stats_handler
    await admin_stats_handler(callback_query, None)

@dp.callback_query()
async def log_callback_queries(callback: types.CallbackQuery):
    logger.info(f"Received callback: {callback.data}")
    await callback.answer()  # –í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "—á–∞—Å–∏–∫–æ–≤" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_command(message: types.Message):
    from handlers.knowledge_base import search_handler
    await search_handler(message, None)

@dp.message(F.text.startswith("üîç "))
async def search_query_command(message: types.Message):
    from handlers.knowledge_base import search_handler
    await search_handler(message, None)

async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

async def on_telegram_error(update, exception):
    if isinstance(exception, TelegramBadRequest) and "message is not modified" in str(exception):
        return True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    raise exception

dp.errors.register(on_telegram_error)

@dp.update()
async def unhandled_update_handler(update: types.Update):
    logger.warning(f"Unhandled update: {update}")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update.message:
        await update.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if os.environ.get("ENVIRONMENT") == "production":
        # –í —Ä–µ–∂–∏–º–µ production –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
        await bot.set_webhook(WEBHOOK_URL)
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API aiogram 3.x)
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
        
        webhook_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_handler.register(app, path=WEBHOOK_PATH)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
        setup_application(app, dp, bot=bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        app.on_startup.append(lambda app: asyncio.create_task(on_startup(bot)))
        app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown(bot)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.environ.get("PORT", 8443))
        logger.info(f"–ó–∞–ø—É—Å–∫ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return await web._run_app(app, host="0.0.0.0", port=port)
    else:
        await bot.delete_webhook()
        await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Update {update} caused error: {exception}")
    return True  # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É

@dp.middleware()
async def timing_middleware(handler, event, data):
    start = time.time()
    try:
        return await handler(event, data)
    finally:
        logging.info(f"Handler {handler.__name__} executed in {time.time()-start:.3f}s")
