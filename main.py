
import logging
import os
import sys
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import Command, CommandStart
import asyncio
from aiohttp import web
import firebase_admin
from firebase_admin import credentials

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import BOT_TOKEN, WEBHOOK_URL, WEBHOOK_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase_initialized = False
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_CREDENTIALS_JSON
    if os.environ.get('FIREBASE_CREDENTIALS_JSON'):
        try:
            cred_dict = json.loads(os.environ.get('FIREBASE_CREDENTIALS_JSON'))
            cred = credentials.Certificate(cred_dict)
            if not firebase_admin._apps:
                firebase_admin.initialize_app(cred)
                firebase_initialized = True
                logger.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_CREDENTIALS_JSON")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π FIREBASE_CREDENTIALS_JSON: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_CONFIG
    elif os.environ.get('FIREBASE_CONFIG'):
        try:
            cred_dict = json.loads(os.environ.get('FIREBASE_CONFIG'))
            cred = credentials.Certificate(cred_dict)
            if not firebase_admin._apps:
                firebase_admin.initialize_app(cred)
                firebase_initialized = True
                logger.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FIREBASE_CONFIG")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π FIREBASE_CONFIG: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    elif os.path.exists("service_account.json"):
        try:
            cred = credentials.Certificate("service_account.json")
            if not firebase_admin._apps:
                firebase_admin.initialize_app(cred)
                firebase_initialized = True
                logger.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∞–π–ª service_account.json")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase –∏–∑ —Ñ–∞–π–ª–∞ service_account.json: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    elif os.path.exists("morkovka-kmv-bot-31365aded116.json"):
        try:
            cred = credentials.Certificate("morkovka-kmv-bot-31365aded116.json")
            if not firebase_admin._apps:
                firebase_admin.initialize_app(cred)
                firebase_initialized = True
                logger.info("Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∞–π–ª morkovka-kmv-bot-31365aded116.json")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase –∏–∑ —Ñ–∞–π–ª–∞ morkovka-kmv-bot-31365aded116.json: {e}")
    
    else:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Firebase. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Firebase –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
if firebase_initialized:
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Firestore
        from firebase_admin import firestore
        db = firestore.client()
        # –ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è
        test_ref = db.collection('test').limit(1).get()
        logger.info("Firebase —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        logger.error(f"Firebase –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Firebase")
        firebase_initialized = False
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Firebase, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
        if firebase_admin._apps:
            for app in list(firebase_admin._apps.values()):
                try:
                    firebase_admin.delete_app(app)
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Firebase: {delete_error}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Firebase –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import config
config.FIREBASE_AVAILABLE = firebase_initialized

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.user_management import register_user_handler, start
from handlers.knowledge_base import knowledge_base_handler, category_handler, product_handler, search_handler
from handlers.testing import testing_handler, test_selection_handler, test_question_handler, test_result_handler
from handlers.admin import admin_handler, admin_categories_handler, admin_products_handler, admin_tests_handler, admin_stats_handler

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(CommandStart())
@dp.message(Command("help"))
async def start_command(message: types.Message):
    await start(message, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
@dp.callback_query(F.data == "knowledge_base")
async def kb_callback(callback_query: types.CallbackQuery):
    await knowledge_base_handler(callback_query, None)

@dp.callback_query(F.data.startswith("category:"))
async def cat_callback(callback_query: types.CallbackQuery):
    await category_handler(callback_query, None)

@dp.callback_query(F.data.startswith("product:"))
async def prod_callback(callback_query: types.CallbackQuery):
    await product_handler(callback_query, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data == "testing")
async def testing_callback(callback_query: types.CallbackQuery):
    await testing_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_select:"))
async def test_select_callback(callback_query: types.CallbackQuery):
    await test_selection_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_answer:"))
async def test_answer_callback(callback_query: types.CallbackQuery):
    await test_question_handler(callback_query, None)

@dp.callback_query(F.data.startswith("test_result:"))
async def test_result_callback(callback_query: types.CallbackQuery):
    await test_result_handler(callback_query, None)

# –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(F.data == "admin")
async def admin_callback(callback_query: types.CallbackQuery):
    await admin_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_categories"))
async def admin_cat_callback(callback_query: types.CallbackQuery):
    await admin_categories_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_products"))
async def admin_prod_callback(callback_query: types.CallbackQuery):
    await admin_products_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_tests"))
async def admin_test_callback(callback_query: types.CallbackQuery):
    await admin_tests_handler(callback_query, None)

@dp.callback_query(F.data.startswith("admin_stats"))
async def admin_stats_callback(callback_query: types.CallbackQuery):
    await admin_stats_handler(callback_query, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_command(message: types.Message):
    await search_handler(message, None)

@dp.message(F.text.startswith("üîç "))
async def search_query_command(message: types.Message):
    await search_handler(message, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def any_message(message: types.Message):
    await register_user_handler(message, None)

async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(url=WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if os.environ.get("ENVIRONMENT") == "production":
        # –í —Ä–µ–∂–∏–º–µ production –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ aiohttp
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API aiogram 3.x)
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
        
        webhook_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_handler.register(app, path=WEBHOOK_PATH)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
        setup_application(app, dp, bot=bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±–µ–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        app.on_startup.append(lambda app: asyncio.create_task(on_startup(bot)))
        app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown(bot)))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        port = int(os.environ.get("PORT", 8443))
        logger.info(f"–ó–∞–ø—É—Å–∫ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return await web._run_app(app, host="0.0.0.0", port=port)
    else:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        await dp.start_polling(bot, on_startup=on_startup, on_shutdown=on_shutdown)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
